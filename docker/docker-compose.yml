version: '3.8'

services:
  # Base de dados MariaDB
  mariadb:
    image: mariadb:10.11
    container_name: govnext-mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mariadb-data:/var/lib/mysql
      - ./config/mariadb/my.cnf:/etc/mysql/conf.d/govnext.cnf:ro
    networks:
      - govnext-backend
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --innodb-buffer-pool-size=1G
      - --innodb-log-file-size=256M
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: govnext-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - govnext-backend
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Aplicação GovNext
  govnext:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
      args:
        - FRAPPE_VERSION=${FRAPPE_VERSION:-14.0.0}
    container_name: govnext-app
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mariadb
      - MYSQL_PORT=3306
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SITE_NAME=${SITE_NAME:-govnext.localhost}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - INSTANCE_TYPE=${INSTANCE_TYPE:-production}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - sites-data:/home/frappe/frappe-bench/sites
      - assets-data:/home/frappe/frappe-bench/sites/assets
      - logs-data:/home/frappe/frappe-bench/logs
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - govnext-backend
      - govnext-frontend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/method/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: govnext-nginx
    restart: unless-stopped
    volumes:
      - sites-data:/var/www/html/sites:ro
      - assets-data:/var/www/html/assets:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - logs-nginx:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      govnext:
        condition: service_healthy
    networks:
      - govnext-frontend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ping || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Worker para tarefas assíncronas
  govnext-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: govnext-worker
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mariadb
      - MYSQL_PORT=3306
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SITE_NAME=${SITE_NAME:-govnext.localhost}
      - WORKER_TYPE=default
    volumes:
      - sites-data:/home/frappe/frappe-bench/sites
      - logs-data:/home/frappe/frappe-bench/logs
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      govnext:
        condition: service_healthy
    networks:
      - govnext-backend
    command: ["bench", "worker", "--queue", "default,short,long"]
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Scheduler para tarefas cron
  govnext-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: govnext-scheduler
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mariadb
      - MYSQL_PORT=3306
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SITE_NAME=${SITE_NAME:-govnext.localhost}
    volumes:
      - sites-data:/home/frappe/frappe-bench/sites
      - logs-data:/home/frappe/frappe-bench/logs
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      govnext:
        condition: service_healthy
    networks:
      - govnext-backend
    command: ["bench", "schedule"]
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: govnext-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - govnext-monitoring
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Dashboard com Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: govnext-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - govnext-monitoring
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# Volumes persistentes
volumes:
  mariadb-data:
    driver: local
  redis-data:
    driver: local
  sites-data:
    driver: local
  assets-data:
    driver: local
  logs-data:
    driver: local
  logs-nginx:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Redes isoladas
networks:
  govnext-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  govnext-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  govnext-monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24